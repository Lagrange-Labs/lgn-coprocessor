#![feature(generic_const_exprs)]

use std::str::FromStr;

use alloy::primitives::{Address, U256};
use hex::FromHex;
use lgn_messages::types::v1::preprocessing::db_tasks::{
    BlockLeafInput, CellLeafInput, DatabaseType, DbBlockType, DbCellType, DbRowType, IndexInputs,
    RowLeafInput,
};
use lgn_messages::types::v1::preprocessing::ext_keys::ProofKey;
use lgn_messages::types::v1::preprocessing::ext_tasks::{
    BlockExtractionInput, Contract, FinalExtraction, FinalExtractionType, MappingBranchInput,
    MappingLeafInput, Mpt, MptType, WorkerTask,
};
use lgn_messages::types::v1::preprocessing::{db_keys, ext_tasks, WorkerTaskType};
use lgn_provers::params::ParamsLoader;
use lgn_provers::provers::v1::preprocessing::euclid_prover::EuclidProver;
use lgn_provers::provers::v1::preprocessing::task::Preprocessing;
use mimalloc::MiMalloc;
use mp2_v1::api::PublicParameters;
use mp2_v1::values_extraction::{
    identifier_block_column, identifier_for_mapping_key_column, identifier_for_mapping_value_column,
};
use tracing_subscriber::EnvFilter;

#[global_allocator]
static GLOBAL: MiMalloc = MiMalloc;

// Only for testing purposes
fn main() {
    test_preprocessing();
}

pub(crate) fn test_preprocessing() {
    tracing_subscriber::fmt()
        .pretty()
        .with_env_filter(EnvFilter::from_default_env())
        .init();

    let mpt_leaf_node: Vec<u8> = vec![
        247, 160, 62, 181, 190, 65, 47, 39, 90, 24, 246, 228, 214, 34, 174, 228, 255, 64, 178, 20,
        103, 201, 38, 34, 71, 113, 183, 130, 212, 192, 149, 209, 68, 75, 149, 148, 205, 130, 252,
        129, 121, 10, 140, 245, 8, 31, 2, 109, 34, 25, 201, 27, 229, 164, 151, 181,
    ];

    let mpt_branch_node: Vec<u8> = vec![
        248, 113, 160, 66, 194, 19, 153, 174, 30, 108, 170, 254, 94, 214, 66, 178, 204, 70, 47,
        170, 100, 128, 97, 244, 59, 203, 185, 72, 220, 225, 170, 37, 28, 154, 75, 128, 160, 79,
        197, 241, 58, 178, 249, 186, 12, 45, 168, 139, 1, 81, 171, 14, 124, 244, 216, 93, 8, 204,
        164, 92, 205, 146, 60, 106, 183, 99, 35, 235, 40, 128, 160, 21, 80, 62, 145, 249, 37, 6,
        84, 207, 114, 144, 110, 56, 167, 203, 20, 195, 241, 204, 6, 101, 131, 121, 211, 127, 12,
        91, 92, 50, 72, 40, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
    ];

    let storage_root: Vec<u8> = vec![
        127, 5, 162, 220, 233, 156, 173, 255, 54, 139, 165, 229, 188, 15, 113, 200, 78, 23, 243,
        254, 181, 161, 67, 103, 79, 82, 153, 125, 151, 101, 227, 75,
    ];

    let contract_nodes: Vec<Vec<u8>> = vec![
        vec![
            248, 102, 157, 56, 106, 140, 69, 118, 128, 209, 84, 201, 164, 199, 81, 19, 24, 121, 4,
            191, 2, 219, 180, 154, 247, 239, 204, 15, 48, 98, 49, 39, 184, 70, 248, 68, 1, 128,
            160, 127, 5, 162, 220, 233, 156, 173, 255, 54, 139, 165, 229, 188, 15, 113, 200, 78,
            23, 243, 254, 181, 161, 67, 103, 79, 82, 153, 125, 151, 101, 227, 75, 160, 44, 243, 16,
            86, 249, 243, 184, 146, 254, 13, 148, 33, 197, 196, 93, 205, 12, 128, 234, 31, 22, 110,
            74, 215, 55, 209, 54, 13, 216, 163, 237, 95,
        ],
        vec![
            248, 145, 160, 133, 95, 110, 243, 91, 171, 20, 178, 132, 167, 250, 188, 60, 127, 119,
            112, 13, 251, 219, 33, 62, 198, 0, 23, 122, 2, 198, 97, 123, 172, 192, 101, 128, 128,
            160, 94, 125, 198, 65, 213, 239, 91, 171, 13, 100, 233, 53, 145, 11, 171, 97, 112, 210,
            8, 210, 249, 100, 164, 126, 134, 227, 180, 72, 96, 157, 120, 102, 160, 144, 167, 213,
            92, 57, 192, 136, 13, 129, 103, 78, 131, 103, 15, 98, 212, 82, 228, 96, 65, 20, 138, 9,
            37, 195, 51, 49, 76, 199, 24, 111, 153, 128, 128, 160, 53, 231, 65, 150, 220, 188, 89,
            56, 54, 206, 159, 173, 5, 163, 227, 183, 87, 177, 90, 94, 40, 77, 65, 243, 223, 152,
            92, 220, 81, 19, 255, 27, 128, 128, 128, 128, 128, 128, 128, 128, 128,
        ],
        vec![
            249, 2, 17, 160, 52, 0, 6, 79, 63, 182, 56, 254, 240, 19, 38, 151, 124, 11, 205, 31,
            36, 167, 242, 153, 243, 202, 78, 90, 209, 185, 233, 51, 194, 88, 33, 92, 160, 84, 207,
            171, 189, 24, 155, 102, 198, 22, 79, 182, 50, 102, 56, 69, 139, 12, 60, 146, 135, 13,
            213, 245, 34, 108, 95, 52, 227, 169, 68, 12, 176, 160, 65, 115, 46, 100, 231, 253, 197,
            76, 95, 40, 110, 229, 85, 167, 48, 203, 35, 218, 171, 31, 24, 51, 84, 62, 0, 51, 90,
            176, 173, 31, 38, 250, 160, 131, 167, 24, 242, 85, 219, 244, 128, 130, 182, 237, 182,
            109, 194, 225, 189, 134, 135, 171, 221, 215, 107, 213, 3, 229, 192, 128, 75, 113, 179,
            34, 34, 160, 192, 175, 249, 192, 207, 1, 15, 5, 26, 21, 57, 66, 94, 70, 95, 1, 166,
            219, 61, 56, 67, 203, 208, 65, 31, 90, 37, 38, 115, 185, 222, 86, 160, 127, 46, 181,
            105, 133, 76, 152, 111, 223, 158, 170, 63, 123, 154, 251, 185, 108, 194, 43, 147, 15,
            190, 168, 116, 232, 226, 184, 23, 185, 46, 194, 86, 160, 26, 197, 244, 39, 82, 181, 91,
            33, 22, 65, 5, 112, 12, 37, 1, 172, 142, 37, 224, 183, 196, 161, 182, 90, 192, 11, 138,
            159, 41, 72, 24, 228, 160, 247, 128, 27, 170, 95, 214, 99, 236, 183, 5, 58, 9, 244, 25,
            224, 20, 6, 200, 218, 21, 150, 244, 86, 150, 33, 95, 127, 66, 169, 248, 168, 108, 160,
            140, 179, 71, 149, 67, 218, 94, 123, 126, 131, 231, 60, 31, 102, 125, 45, 195, 163,
            148, 182, 133, 42, 98, 79, 155, 106, 175, 236, 121, 178, 167, 175, 160, 202, 133, 117,
            19, 155, 198, 212, 196, 70, 186, 78, 157, 248, 39, 0, 9, 73, 192, 173, 17, 23, 248,
            201, 80, 4, 33, 216, 207, 222, 183, 242, 211, 160, 23, 212, 77, 55, 222, 187, 146, 123,
            21, 31, 29, 172, 24, 27, 167, 61, 161, 202, 179, 21, 130, 36, 161, 217, 184, 39, 239,
            139, 109, 21, 50, 225, 160, 81, 118, 243, 127, 55, 58, 191, 236, 201, 145, 74, 208, 84,
            11, 229, 33, 23, 183, 181, 251, 30, 208, 36, 33, 255, 200, 178, 126, 9, 220, 218, 35,
            160, 63, 117, 9, 125, 187, 78, 46, 129, 216, 71, 89, 25, 33, 43, 224, 225, 242, 143,
            74, 102, 129, 117, 134, 235, 212, 123, 241, 206, 223, 101, 239, 86, 160, 6, 26, 121,
            183, 206, 159, 130, 179, 135, 218, 51, 168, 93, 51, 107, 83, 73, 132, 174, 201, 219,
            153, 178, 156, 108, 111, 189, 203, 109, 79, 16, 179, 160, 143, 210, 137, 2, 100, 8, 2,
            92, 13, 3, 50, 93, 232, 161, 106, 204, 255, 191, 123, 80, 186, 94, 48, 42, 178, 102,
            248, 129, 208, 168, 182, 78, 160, 54, 91, 221, 40, 88, 17, 62, 95, 48, 232, 41, 42, 78,
            31, 230, 225, 127, 0, 166, 54, 239, 152, 95, 201, 185, 70, 224, 5, 55, 46, 150, 163,
            128,
        ],
        vec![
            249, 2, 17, 160, 83, 9, 186, 195, 178, 76, 74, 112, 161, 90, 121, 132, 112, 166, 79,
            96, 253, 179, 116, 150, 117, 33, 33, 17, 224, 53, 228, 238, 139, 211, 69, 81, 160, 156,
            114, 7, 175, 153, 213, 188, 81, 138, 223, 92, 57, 213, 130, 41, 112, 132, 112, 183,
            183, 243, 58, 179, 227, 2, 237, 90, 12, 155, 148, 116, 223, 160, 141, 205, 139, 209,
            225, 98, 210, 251, 138, 145, 114, 205, 110, 147, 239, 242, 230, 150, 116, 38, 195, 79,
            151, 74, 168, 91, 248, 158, 149, 15, 204, 111, 160, 96, 218, 192, 130, 153, 253, 66, 0,
            77, 236, 211, 30, 1, 5, 73, 122, 57, 158, 159, 155, 21, 178, 33, 188, 52, 241, 103,
            203, 114, 132, 243, 95, 160, 127, 137, 255, 188, 133, 202, 202, 78, 229, 242, 113, 139,
            136, 187, 144, 167, 162, 28, 70, 22, 129, 170, 106, 223, 234, 164, 191, 15, 239, 246,
            252, 202, 160, 139, 44, 50, 174, 148, 188, 140, 189, 134, 148, 56, 136, 69, 70, 137,
            205, 42, 219, 160, 19, 194, 217, 135, 70, 105, 9, 73, 74, 3, 174, 57, 29, 160, 20, 69,
            227, 161, 197, 70, 13, 43, 164, 144, 10, 164, 127, 205, 197, 236, 20, 48, 84, 240, 130,
            224, 111, 156, 77, 72, 138, 128, 224, 232, 167, 199, 160, 51, 242, 145, 20, 9, 158,
            242, 239, 8, 133, 29, 134, 55, 41, 204, 51, 66, 199, 14, 227, 34, 14, 212, 136, 83,
            219, 16, 147, 32, 165, 176, 104, 160, 93, 32, 163, 50, 145, 55, 60, 101, 104, 141, 36,
            113, 207, 113, 220, 35, 141, 239, 46, 38, 175, 103, 149, 159, 177, 173, 13, 175, 199,
            106, 175, 21, 160, 79, 95, 208, 125, 208, 70, 127, 61, 74, 122, 202, 214, 121, 133,
            235, 238, 146, 254, 233, 187, 82, 205, 154, 67, 226, 84, 201, 194, 21, 139, 96, 159,
            160, 42, 114, 190, 63, 53, 62, 232, 51, 46, 156, 102, 64, 236, 246, 14, 17, 172, 184,
            189, 181, 4, 96, 64, 80, 122, 195, 169, 97, 139, 188, 14, 124, 160, 119, 181, 165, 157,
            188, 25, 181, 82, 199, 208, 154, 85, 200, 124, 121, 128, 28, 36, 231, 136, 13, 3, 116,
            7, 242, 188, 169, 102, 177, 225, 15, 214, 160, 243, 98, 12, 161, 173, 135, 21, 235,
            192, 236, 231, 27, 57, 6, 43, 179, 116, 224, 155, 25, 97, 47, 180, 34, 93, 19, 183, 67,
            93, 93, 159, 193, 160, 143, 213, 16, 124, 193, 164, 95, 34, 94, 214, 250, 255, 25, 175,
            253, 196, 4, 2, 192, 109, 99, 67, 104, 149, 35, 102, 112, 211, 6, 133, 4, 103, 160,
            187, 1, 236, 24, 33, 128, 235, 136, 53, 45, 133, 141, 78, 251, 252, 51, 34, 92, 209,
            33, 225, 109, 95, 37, 99, 170, 106, 39, 150, 212, 233, 54, 160, 250, 245, 31, 200, 113,
            5, 172, 101, 242, 231, 135, 57, 64, 4, 75, 99, 191, 63, 207, 113, 63, 6, 25, 50, 233,
            196, 230, 107, 19, 103, 201, 174, 128,
        ],
        vec![
            249, 2, 17, 160, 40, 103, 141, 200, 234, 149, 55, 93, 144, 66, 167, 57, 21, 175, 110,
            15, 19, 98, 125, 42, 22, 137, 140, 42, 197, 246, 48, 214, 65, 217, 235, 159, 160, 64,
            30, 145, 172, 219, 72, 237, 74, 29, 251, 41, 87, 45, 178, 81, 170, 233, 2, 130, 84,
            161, 34, 117, 53, 101, 4, 166, 52, 83, 25, 149, 111, 160, 198, 8, 247, 21, 219, 59,
            223, 68, 199, 233, 82, 195, 100, 206, 35, 101, 3, 71, 30, 138, 240, 84, 123, 74, 81,
            101, 218, 20, 150, 37, 136, 236, 160, 138, 38, 176, 52, 75, 247, 116, 224, 120, 207,
            66, 28, 59, 236, 218, 182, 75, 161, 15, 103, 168, 130, 148, 209, 72, 5, 119, 44, 10,
            188, 203, 183, 160, 236, 104, 64, 209, 92, 137, 250, 91, 88, 23, 198, 26, 41, 197, 126,
            152, 55, 69, 138, 4, 121, 9, 20, 22, 186, 82, 67, 139, 12, 19, 202, 201, 160, 237, 168,
            162, 159, 48, 41, 111, 156, 101, 146, 250, 10, 89, 236, 139, 127, 81, 66, 20, 63, 237,
            213, 193, 106, 91, 42, 106, 36, 83, 4, 237, 169, 160, 137, 157, 85, 157, 153, 9, 181,
            162, 148, 16, 82, 118, 190, 174, 210, 255, 192, 134, 144, 88, 156, 117, 179, 199, 191,
            143, 57, 49, 65, 209, 131, 94, 160, 13, 22, 225, 35, 100, 59, 132, 52, 5, 185, 141,
            108, 216, 114, 110, 48, 209, 110, 215, 178, 128, 54, 125, 65, 222, 249, 119, 223, 57,
            176, 186, 147, 160, 29, 156, 113, 155, 38, 31, 99, 226, 55, 146, 189, 231, 11, 130,
            156, 230, 183, 54, 220, 83, 21, 153, 165, 79, 135, 44, 203, 248, 100, 244, 20, 36, 160,
            74, 15, 27, 122, 252, 62, 82, 153, 129, 236, 149, 19, 153, 243, 232, 250, 165, 233,
            120, 68, 183, 228, 211, 106, 87, 157, 20, 238, 17, 128, 3, 98, 160, 149, 137, 35, 94,
            7, 4, 171, 164, 180, 41, 109, 87, 150, 145, 181, 36, 102, 191, 62, 155, 106, 37, 224,
            90, 212, 182, 44, 26, 228, 218, 135, 114, 160, 151, 52, 136, 113, 219, 160, 191, 71,
            63, 159, 169, 69, 52, 202, 213, 105, 138, 241, 120, 110, 244, 61, 83, 2, 67, 136, 235,
            138, 206, 233, 14, 120, 160, 181, 173, 109, 2, 72, 64, 238, 215, 87, 181, 210, 137,
            134, 211, 223, 244, 216, 20, 135, 104, 32, 197, 113, 254, 64, 72, 51, 35, 174, 186, 8,
            20, 160, 225, 95, 27, 0, 167, 0, 23, 22, 133, 109, 255, 138, 3, 211, 20, 141, 30, 158,
            184, 171, 128, 47, 250, 166, 40, 142, 132, 144, 228, 254, 9, 236, 160, 15, 102, 77, 60,
            243, 254, 130, 28, 226, 19, 79, 6, 68, 189, 68, 183, 181, 205, 145, 227, 223, 191, 78,
            25, 113, 201, 166, 202, 205, 196, 158, 52, 160, 145, 179, 32, 133, 172, 91, 112, 84,
            168, 202, 116, 130, 61, 49, 215, 0, 149, 95, 79, 104, 57, 145, 93, 247, 141, 82, 247,
            251, 225, 116, 222, 234, 128,
        ],
        vec![
            249, 2, 17, 160, 111, 4, 216, 69, 180, 252, 3, 77, 195, 249, 105, 4, 42, 219, 196, 150,
            167, 50, 255, 236, 148, 81, 227, 204, 247, 1, 162, 59, 85, 41, 66, 76, 160, 218, 15,
            154, 182, 53, 179, 156, 39, 188, 35, 251, 65, 33, 152, 32, 10, 81, 235, 99, 163, 200,
            160, 76, 227, 250, 144, 156, 0, 75, 186, 243, 80, 160, 127, 190, 250, 83, 57, 83, 5,
            244, 69, 178, 227, 231, 197, 132, 55, 122, 45, 53, 188, 60, 38, 83, 112, 120, 127, 69,
            212, 72, 207, 250, 66, 229, 160, 72, 75, 149, 246, 165, 230, 49, 152, 253, 217, 246,
            85, 95, 75, 254, 45, 183, 110, 210, 151, 100, 119, 112, 154, 239, 73, 42, 23, 25, 217,
            214, 110, 160, 0, 22, 122, 235, 191, 110, 144, 1, 244, 173, 246, 125, 0, 201, 42, 81,
            242, 23, 238, 1, 239, 209, 69, 77, 80, 99, 240, 154, 18, 96, 238, 165, 160, 147, 46,
            118, 51, 217, 182, 254, 184, 66, 110, 225, 249, 208, 62, 166, 56, 19, 89, 171, 69, 175,
            171, 192, 160, 165, 238, 137, 212, 174, 3, 221, 72, 160, 206, 47, 49, 98, 96, 121, 15,
            146, 229, 111, 53, 61, 55, 240, 127, 198, 105, 125, 109, 39, 140, 222, 191, 94, 56,
            116, 222, 124, 184, 71, 253, 163, 160, 37, 175, 81, 200, 134, 233, 121, 51, 79, 131,
            92, 164, 163, 51, 254, 238, 58, 28, 24, 205, 150, 162, 200, 173, 39, 78, 95, 246, 37,
            233, 59, 175, 160, 248, 179, 87, 202, 229, 152, 22, 155, 50, 28, 83, 216, 253, 24, 175,
            50, 11, 254, 180, 89, 242, 240, 114, 243, 124, 240, 38, 70, 68, 132, 125, 125, 160, 44,
            216, 180, 63, 51, 188, 108, 229, 103, 148, 166, 30, 34, 142, 194, 178, 29, 107, 244,
            149, 89, 173, 92, 24, 239, 167, 0, 219, 56, 251, 173, 35, 160, 230, 146, 39, 52, 194,
            47, 49, 162, 220, 186, 211, 216, 228, 212, 207, 224, 123, 182, 255, 74, 173, 63, 93,
            241, 122, 248, 52, 183, 186, 157, 240, 205, 160, 93, 202, 65, 194, 153, 61, 67, 27, 66,
            30, 99, 136, 144, 213, 230, 170, 179, 105, 135, 151, 62, 209, 93, 228, 41, 135, 230,
            229, 94, 171, 215, 71, 160, 197, 1, 242, 227, 126, 42, 124, 143, 178, 203, 243, 25,
            173, 31, 227, 121, 9, 227, 66, 173, 111, 57, 222, 240, 158, 90, 14, 91, 121, 126, 228,
            35, 160, 31, 32, 1, 242, 50, 28, 217, 93, 255, 162, 192, 246, 24, 200, 82, 105, 247, 0,
            149, 229, 20, 117, 0, 220, 38, 234, 142, 12, 152, 4, 201, 20, 160, 127, 235, 4, 95,
            159, 237, 192, 228, 180, 1, 134, 214, 115, 80, 74, 188, 168, 10, 97, 198, 236, 221,
            126, 228, 178, 6, 149, 59, 29, 84, 31, 130, 160, 86, 40, 108, 161, 162, 87, 204, 79,
            116, 173, 75, 55, 72, 177, 78, 1, 60, 149, 87, 40, 78, 140, 108, 119, 233, 144, 221,
            47, 136, 87, 75, 249, 128,
        ],
        vec![
            249, 2, 17, 160, 8, 152, 122, 233, 34, 193, 194, 110, 64, 131, 55, 16, 203, 225, 123,
            172, 80, 167, 21, 190, 125, 143, 237, 3, 39, 47, 146, 154, 203, 85, 220, 241, 160, 151,
            64, 114, 246, 131, 82, 104, 69, 26, 126, 112, 35, 94, 106, 224, 213, 95, 62, 46, 140,
            61, 40, 175, 191, 53, 226, 15, 189, 226, 250, 126, 85, 160, 85, 114, 83, 90, 31, 128,
            30, 240, 223, 76, 91, 28, 203, 200, 142, 111, 119, 134, 116, 97, 72, 135, 145, 114,
            216, 151, 208, 117, 77, 78, 130, 164, 160, 158, 119, 244, 66, 133, 100, 186, 102, 151,
            195, 58, 239, 64, 71, 37, 13, 245, 143, 107, 166, 150, 237, 14, 48, 150, 94, 94, 219,
            108, 109, 68, 130, 160, 149, 79, 133, 230, 150, 227, 110, 227, 25, 33, 94, 230, 181,
            58, 167, 37, 116, 255, 221, 249, 199, 236, 89, 160, 231, 74, 122, 208, 30, 221, 187,
            20, 160, 160, 36, 224, 159, 150, 201, 163, 21, 103, 221, 170, 76, 93, 133, 147, 108,
            175, 37, 83, 96, 170, 24, 94, 103, 84, 87, 199, 64, 116, 108, 226, 120, 160, 42, 181,
            64, 56, 1, 133, 131, 89, 116, 166, 110, 54, 36, 106, 72, 178, 201, 122, 125, 101, 167,
            242, 10, 137, 219, 87, 146, 91, 211, 176, 58, 172, 160, 252, 220, 14, 194, 156, 140,
            151, 156, 185, 11, 72, 231, 197, 237, 169, 164, 50, 73, 81, 51, 154, 127, 55, 167, 51,
            42, 0, 183, 236, 242, 178, 27, 160, 93, 212, 215, 188, 207, 47, 242, 214, 249, 252,
            118, 144, 198, 108, 88, 72, 130, 30, 6, 251, 95, 190, 78, 163, 115, 189, 113, 244, 27,
            180, 137, 10, 160, 234, 81, 41, 141, 166, 237, 75, 216, 199, 21, 164, 95, 128, 60, 106,
            117, 157, 186, 148, 24, 168, 84, 1, 107, 119, 27, 102, 167, 21, 215, 97, 227, 160, 139,
            47, 237, 143, 4, 195, 134, 241, 239, 75, 157, 25, 192, 237, 56, 19, 0, 111, 60, 112,
            195, 100, 202, 253, 80, 7, 197, 44, 163, 184, 75, 92, 160, 237, 253, 36, 192, 132, 155,
            62, 125, 138, 146, 78, 6, 39, 9, 187, 130, 175, 228, 151, 102, 223, 103, 240, 73, 15,
            115, 142, 129, 75, 243, 131, 86, 160, 100, 243, 63, 48, 36, 43, 185, 36, 128, 247, 192,
            156, 177, 244, 112, 162, 185, 145, 108, 127, 185, 130, 51, 122, 228, 91, 22, 183, 111,
            140, 128, 202, 160, 49, 85, 24, 84, 66, 4, 223, 115, 80, 93, 16, 113, 252, 119, 245,
            12, 121, 87, 194, 77, 178, 15, 108, 234, 99, 2, 119, 245, 43, 78, 73, 233, 160, 24, 28,
            254, 131, 98, 18, 161, 45, 65, 67, 66, 18, 115, 9, 113, 35, 22, 189, 170, 245, 101,
            173, 44, 239, 237, 84, 211, 13, 186, 87, 2, 215, 160, 46, 251, 101, 134, 154, 42, 222,
            109, 144, 177, 239, 19, 230, 184, 67, 93, 158, 47, 179, 237, 234, 183, 64, 255, 25, 54,
            181, 156, 145, 149, 69, 169, 128,
        ],
        vec![
            249, 2, 17, 160, 127, 123, 64, 23, 70, 6, 147, 31, 159, 238, 45, 48, 92, 1, 79, 14,
            145, 26, 237, 171, 139, 227, 23, 27, 14, 95, 155, 161, 241, 223, 133, 162, 160, 118,
            49, 61, 226, 194, 190, 136, 20, 156, 39, 62, 156, 15, 86, 107, 16, 123, 95, 35, 189,
            17, 253, 174, 207, 161, 28, 184, 171, 207, 142, 10, 59, 160, 61, 83, 180, 21, 52, 132,
            233, 177, 181, 48, 172, 123, 23, 53, 193, 108, 15, 176, 121, 104, 131, 117, 85, 186,
            243, 0, 214, 167, 114, 39, 9, 17, 160, 72, 9, 151, 143, 67, 91, 247, 113, 71, 34, 194,
            224, 128, 208, 87, 231, 251, 240, 118, 164, 210, 140, 204, 113, 167, 113, 125, 171, 6,
            238, 91, 168, 160, 151, 79, 191, 140, 176, 100, 176, 199, 121, 204, 90, 147, 18, 168,
            186, 138, 73, 160, 66, 210, 195, 149, 95, 16, 162, 153, 103, 8, 143, 16, 81, 85, 160,
            127, 132, 1, 196, 186, 248, 98, 96, 64, 7, 52, 114, 132, 228, 233, 239, 94, 125, 229,
            125, 134, 149, 139, 214, 124, 4, 238, 5, 79, 17, 7, 31, 160, 224, 72, 191, 161, 81, 78,
            23, 201, 153, 185, 51, 238, 73, 224, 87, 35, 247, 237, 45, 13, 215, 108, 70, 172, 176,
            27, 241, 110, 159, 240, 29, 67, 160, 50, 230, 125, 75, 197, 229, 169, 93, 30, 157, 29,
            167, 191, 178, 199, 143, 59, 213, 65, 182, 201, 237, 167, 66, 180, 230, 88, 92, 163,
            138, 13, 29, 160, 30, 240, 151, 175, 20, 116, 90, 2, 236, 154, 7, 163, 241, 198, 94,
            176, 87, 211, 206, 99, 133, 225, 233, 235, 200, 51, 141, 151, 44, 190, 135, 237, 160,
            62, 12, 43, 106, 72, 126, 8, 130, 46, 206, 59, 163, 87, 237, 211, 113, 9, 102, 188, 21,
            147, 110, 76, 58, 60, 38, 125, 128, 186, 66, 131, 254, 160, 202, 62, 81, 108, 182, 186,
            236, 225, 186, 67, 110, 47, 14, 27, 183, 61, 21, 162, 45, 226, 222, 24, 66, 254, 244,
            216, 240, 221, 171, 40, 61, 176, 160, 230, 177, 236, 149, 154, 183, 69, 187, 75, 61,
            180, 88, 197, 230, 169, 129, 238, 168, 2, 241, 207, 152, 222, 60, 191, 73, 141, 48, 62,
            119, 82, 9, 160, 176, 65, 142, 16, 29, 73, 187, 110, 13, 106, 15, 214, 222, 161, 2,
            251, 126, 2, 120, 229, 169, 37, 104, 133, 42, 121, 108, 131, 77, 177, 230, 183, 160,
            74, 190, 208, 118, 206, 19, 195, 44, 135, 210, 85, 130, 116, 218, 177, 37, 23, 24, 18,
            91, 77, 144, 101, 160, 3, 67, 23, 167, 34, 112, 51, 17, 160, 56, 229, 100, 107, 67,
            165, 69, 199, 2, 50, 183, 42, 235, 2, 218, 15, 195, 21, 50, 33, 219, 59, 145, 111, 224,
            39, 35, 109, 56, 91, 209, 198, 160, 67, 44, 144, 217, 70, 72, 89, 173, 198, 227, 90,
            119, 7, 41, 226, 62, 7, 189, 141, 252, 76, 196, 172, 117, 102, 70, 103, 186, 120, 135,
            134, 36, 128,
        ],
    ];

    let rlp_header: Vec<u8> = vec![
        249, 2, 92, 160, 46, 233, 17, 154, 39, 70, 27, 95, 77, 99, 239, 250, 212, 13, 127, 152,
        233, 244, 24, 120, 229, 9, 17, 17, 144, 87, 55, 188, 10, 26, 52, 97, 160, 29, 204, 77, 232,
        222, 199, 93, 122, 171, 133, 181, 103, 182, 204, 212, 26, 211, 18, 69, 27, 148, 138, 116,
        19, 240, 161, 66, 253, 64, 212, 147, 71, 148, 50, 253, 253, 46, 160, 141, 145, 107, 143,
        78, 115, 208, 87, 233, 155, 195, 53, 139, 47, 77, 160, 178, 154, 73, 101, 241, 65, 79, 148,
        90, 37, 114, 136, 165, 205, 161, 176, 6, 128, 136, 52, 34, 43, 117, 212, 103, 98, 188, 94,
        233, 80, 149, 80, 160, 91, 199, 46, 93, 109, 0, 126, 104, 192, 22, 241, 153, 36, 122, 62,
        185, 131, 76, 238, 147, 129, 17, 137, 15, 223, 197, 75, 22, 21, 53, 226, 163, 160, 7, 79,
        226, 21, 23, 208, 185, 202, 99, 104, 46, 162, 120, 198, 97, 31, 183, 52, 186, 130, 74, 210,
        208, 210, 14, 40, 56, 167, 205, 42, 15, 129, 185, 1, 0, 0, 16, 35, 136, 0, 2, 96, 192, 0,
        16, 0, 10, 0, 0, 0, 16, 0, 12, 1, 0, 0, 10, 1, 16, 0, 0, 0, 0, 64, 128, 4, 144, 0, 0, 8, 1,
        0, 128, 0, 0, 0, 0, 0, 64, 1, 132, 0, 192, 34, 0, 128, 1, 0, 0, 64, 65, 0, 0, 24, 0, 0, 68,
        2, 0, 0, 0, 8, 128, 64, 4, 66, 128, 72, 20, 0, 46, 6, 0, 0, 1, 4, 128, 0, 5, 0, 132, 2, 16,
        68, 1, 0, 2, 140, 8, 32, 8, 0, 52, 1, 72, 130, 64, 0, 32, 4, 4, 8, 177, 128, 1, 8, 0, 0, 8,
        1, 192, 8, 0, 32, 17, 0, 16, 0, 16, 0, 16, 0, 0, 2, 0, 0, 128, 0, 1, 1, 0, 32, 16, 128, 5,
        1, 130, 133, 1, 0, 0, 32, 0, 0, 132, 8, 128, 0, 1, 3, 5, 36, 0, 16, 0, 0, 8, 0, 64, 2, 1,
        0, 0, 129, 0, 0, 64, 0, 64, 0, 0, 48, 10, 0, 16, 8, 0, 18, 3, 16, 128, 48, 2, 32, 0, 16, 0,
        0, 0, 6, 2, 2, 32, 1, 1, 0, 0, 0, 1, 138, 2, 0, 0, 0, 0, 0, 128, 2, 0, 0, 128, 0, 1, 0, 32,
        1, 0, 96, 146, 64, 64, 128, 4, 0, 8, 128, 16, 0, 16, 0, 0, 34, 16, 0, 8, 0, 68, 129, 0, 12,
        32, 0, 134, 32, 2, 1, 8, 0, 80, 16, 0, 128, 131, 32, 34, 232, 132, 1, 201, 195, 128, 131,
        61, 206, 82, 132, 102, 183, 143, 172, 153, 216, 131, 1, 14, 7, 132, 103, 101, 116, 104,
        136, 103, 111, 49, 46, 50, 50, 46, 51, 133, 108, 105, 110, 117, 120, 160, 100, 53, 251, 21,
        150, 251, 197, 81, 224, 113, 234, 84, 144, 188, 211, 156, 10, 191, 69, 51, 167, 186, 40,
        235, 131, 135, 184, 215, 209, 90, 190, 140, 136, 0, 0, 0, 0, 0, 0, 0, 0, 8, 160, 251, 138,
        195, 244, 19, 118, 186, 78, 234, 223, 228, 167, 110, 232, 22, 160, 162, 232, 167, 130, 180,
        133, 231, 202, 212, 147, 120, 4, 88, 111, 122, 96, 131, 2, 0, 0, 128, 160, 109, 124, 189,
        50, 127, 227, 84, 235, 190, 127, 15, 38, 43, 209, 139, 21, 59, 142, 159, 16, 156, 207, 192,
        5, 50, 32, 55, 59, 32, 179, 138, 212,
    ];

    let params: PublicParameters = ParamsLoader::prepare_bincode(
        "base_url",
        "/Users/andrussalumets/IdeaProjects/zkmr_params_v1",
        "preprocessing_params.bin",
        "checksum_expected_local_path",
        true,
        true,
    )
        .unwrap();

    let euclid_prover = EuclidProver::new(params);

    let mut preprocessing = Preprocessing::new(euclid_prover);

    let address = Address::from_hex("0x2Ea072948819c4aC82a10d5F8067581488351eD9").unwrap();
    let mapping_slot = 1;

    // NFT id = 0
    let mapping_key = U256::ZERO;

    // User address(also in this case contract address)
    let mapping_value = U256::from_str("0x2ea072948819c4ac82a10d5f8067581488351ed9").unwrap();

    let cell_task = WorkerTask {
        block_nr: 0,
        chain_id: 0,
        task_type: WorkerTaskType::Database(DatabaseType::Cell(DbCellType::Leaf(CellLeafInput {
            table_id: 0,
            row_id: "".to_string(),
            cell_id: 0,
            identifier: identifier_for_mapping_value_column(mapping_slot, &address),
            value: mapping_value,
        }))),
    };

    let cells_proof = preprocessing.run_inner(cell_task).unwrap();

    let row_task = WorkerTask {
        block_nr: 0,
        chain_id: 0,
        task_type: WorkerTaskType::Database(DatabaseType::Row(DbRowType::Leaf(RowLeafInput {
            table_id: 0,
            row_id: "".to_string(),
            identifier: identifier_for_mapping_key_column(mapping_slot, &address),
            value: mapping_key,
            cells_proof_location: None,
            cells_proof,
        }))),
    };

    let rows_proof = preprocessing.run_inner(row_task).unwrap();

    let mpt_leaf_task = WorkerTask {
        block_nr: 0,
        chain_id: 0,
        task_type: WorkerTaskType::Extraction(ext_tasks::ExtractionType::MptExtraction(Mpt {
            table_id: 0,
            block_nr: 0,
            node_hash: Default::default(),
            mpt_type: MptType::MappingLeaf(MappingLeafInput {
                key: mapping_key.to_be_bytes_vec(),
                node: mpt_leaf_node,
                slot: mapping_slot as usize,
                contract_address: address,
            }),
        })),
    };

    let mpt_leaf_proof = preprocessing.run_inner(mpt_leaf_task).unwrap();

    let mpt_branch_task = WorkerTask {
        block_nr: 0,
        chain_id: 0,
        task_type: WorkerTaskType::Extraction(ext_tasks::ExtractionType::MptExtraction(Mpt {
            table_id: 0,
            block_nr: 0,
            node_hash: Default::default(),
            mpt_type: MptType::MappingBranch(MappingBranchInput {
                node: mpt_branch_node,
                children: vec![],
                children_proofs: vec![mpt_leaf_proof],
            }),
        })),
    };

    let mpt_branch_proof = preprocessing.run_inner(mpt_branch_task).unwrap();

    let contract_proof_task = WorkerTask {
        block_nr: 0,
        chain_id: 0,
        task_type: WorkerTaskType::Extraction(ext_tasks::ExtractionType::ContractExtraction(
            Contract {
                block_nr: 0,
                storage_root,
                contract: address,
                nodes: contract_nodes,
            },
        )),
    };

    let contract_proof = preprocessing.run_inner(contract_proof_task).unwrap();

    let ext_block_proof_task = WorkerTask {
        block_nr: 0,
        chain_id: 0,
        task_type: WorkerTaskType::Extraction(ext_tasks::ExtractionType::BlockExtraction(
            BlockExtractionInput { rlp_header },
        )),
    };

    let block_proof = preprocessing.run_inner(ext_block_proof_task).unwrap();

    let final_extraction_simple_task = WorkerTask {
        block_nr: 0,
        chain_id: 0,
        task_type: WorkerTaskType::Extraction(ext_tasks::ExtractionType::FinalExtraction(
            FinalExtraction {
                table_id: 0,
                block_nr: 0,
                contract: address,
                value_proof_version: (0, Default::default()),
                extraction_type: FinalExtractionType::Simple(true),
                block_proof,
                contract_proof,
                value_proof: mpt_branch_proof,
                length_proof: vec![],
            },
        )),
    };

    let final_extraction_simple_proof = preprocessing
        .run_inner(final_extraction_simple_task)
        .unwrap();

    let block_leaf_input = IndexInputs {
        table_id: 0,
        block_nr: 0,
        inputs: vec![DbBlockType::Leaf(BlockLeafInput {
            table_id: 0,
            block_id: identifier_block_column(),
            extraction_proof_location: ProofKey::PublicParams,
            rows_proof_location: db_keys::ProofKey::Block(0, 0),
            extraction_proof: final_extraction_simple_proof,
            rows_proof,
        })],
    };
    let db_block_task = WorkerTask {
        block_nr: 0,
        chain_id: 0,
        task_type: WorkerTaskType::Database(DatabaseType::Index(block_leaf_input)),
    };

    let db_block_proof = preprocessing.run_inner(db_block_task).unwrap();
}
